In a programming language the data type of an entity decides, among other things, 
the allowed values that it can have and 
the set of operations that can be performed with them.
The same applies to data structures, each structure can be operated 
with a different bunch of operators in order to work with them. 









Let's create as an example the set of the prime numbers up to 50:
$$
\{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\}
$$



The length of the sequence is its number of elements and could be any finite value (like in the sequence $(1,5,6,5,8,10)$) 
or infinite (like Fibonacci sequence).






Let's find in the examples below an approximation to the infinite sum of the sequence: 
$$
\left[\sqrt{\frac{n}{n^4+1}}| n\in\mathbb{N}\right]
$$


 



As an example of tuple use let's generate a set of Pythagorean triples, 
tuples like $\left(a,b,c\in\mathbb{Z}^+|a^2 + b^2 = c^2\right)$ using the following three equations:
\begin{equation}
    \begin{cases}
        a  & = i^2 - 1\\
        b & = 2i\\
        c & = i^2+1
    \end{cases}       
\end{equation}





Given the set 
$\Pi = \{1\leq i\leq 30, i\in\mathbb{N}|\; i \;\textrm{is prime}\}$ 
and the set 
$E = \{1\leq i\leq 30, i\in\mathbb{N}|\; i \; \textrm{is even}\}$: 
$$
\Pi = \{2, 3, 5, 7, 11, 13, 17, 19, 23, 29\}
$$
$$
E = \{2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30\}
$$
we can check first that the following assertion is false:
$$
(1\in P) \land (5\in P)
$$
and we can also check the first De Morgan's Law ($\neg (P\lor Q) \iff (\neg P \land \neg Q)$) for the assertions $P = a\in \Pi$ and $Q = a\in E$:
$$
\neg (a\in\Pi \lor a\in E) \iff (\neg a\in\Pi \land \neg a\in E)
$$
%$$
%(\neg a\in\Pi \land \neg a\in E) \to   \neg (a\in\Pi \lor a\in E)
%$$












 



In a programming language all these objects are represented by different data structures.
Fortran for example does not include tuples, sets or sequences, but vectors, matrices and tensors are represented with arrays. 
On the contrary, Python has built-in the structures of sets and tuples among others and arrays are available within the \texttt{NumPy} library.  

With the Fortran examples below the following concepts are covered:
\begin{enumerate}[noitemsep]
    \item Declaring arrays: type, rank and dimension.
    \item Initialize arrays: constructors. 
    \item Iterators for arrays, sectors or slices. 
\end{enumerate}

Also, with the Python examples, the following concepts are treated:
\begin{enumerate}[noitemsep]
    \item Constructors, iterators and slices for NumPy arrays.
    \item Using sets, lists, tuples and dictionaries: constructors.
    %\item Iterators for data structures.
\end{enumerate}












Derived data types can be created either from intrinsic types or from other derived types previously defined.



In addition, Python also allows non-primitive data types (explained in this book as data structures)
and user-defined data structures.


En el codigo de operadores

  P = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}
  E = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30}
  
    print( "(1 in P) and (5 in P) = ", (1 in P) and (5 in P) )
  print( not(a in P or a in E), "implies", not(a in P) and not(a in E) )
